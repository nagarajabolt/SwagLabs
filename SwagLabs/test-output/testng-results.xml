<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="7" passed="6" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-04-12T10:49:01 IST" name="Suite" finished-at="2024-04-12T10:51:49 IST" duration-ms="168052">
    <groups>
      <group name="sanity, regression">
        <method signature="Scenarios.sortingCheck()[pri:2, instance:testcases.Scenarios@7dc0f706]" name="sortingCheck" class="testcases.Scenarios"/>
      </group> <!-- sanity, regression -->
      <group name="regression">
        <method signature="Scenarios.loginFlow()[pri:0, instance:testcases.Scenarios@7dc0f706]" name="loginFlow" class="testcases.Scenarios"/>
        <method signature="Scenarios.productListingVerification()[pri:1, instance:testcases.Scenarios@7dc0f706]" name="productListingVerification" class="testcases.Scenarios"/>
        <method signature="Scenarios.addingToCart()[pri:3, instance:testcases.Scenarios@7dc0f706]" name="addingToCart" class="testcases.Scenarios"/>
        <method signature="Scenarios.checkOut()[pri:4, instance:testcases.Scenarios@7dc0f706]" name="checkOut" class="testcases.Scenarios"/>
        <method signature="Scenarios.additional_Case()[pri:5, instance:testcases.Scenarios@7dc0f706]" name="additional_Case" class="testcases.Scenarios"/>
        <method signature="Scenarios.purposelyFailLoginFlow()[pri:6, instance:testcases.Scenarios@7dc0f706]" name="purposelyFailLoginFlow" class="testcases.Scenarios"/>
      </group> <!-- regression -->
      <group name="e2e">
        <method signature="Scenarios.loginFlow()[pri:0, instance:testcases.Scenarios@7dc0f706]" name="loginFlow" class="testcases.Scenarios"/>
        <method signature="Scenarios.additional_Case()[pri:5, instance:testcases.Scenarios@7dc0f706]" name="additional_Case" class="testcases.Scenarios"/>
        <method signature="Scenarios.purposelyFailLoginFlow()[pri:6, instance:testcases.Scenarios@7dc0f706]" name="purposelyFailLoginFlow" class="testcases.Scenarios"/>
      </group> <!-- e2e -->
      <group name="sanity">
        <method signature="Scenarios.loginFlow()[pri:0, instance:testcases.Scenarios@7dc0f706]" name="loginFlow" class="testcases.Scenarios"/>
        <method signature="Scenarios.productListingVerification()[pri:1, instance:testcases.Scenarios@7dc0f706]" name="productListingVerification" class="testcases.Scenarios"/>
        <method signature="Scenarios.addingToCart()[pri:3, instance:testcases.Scenarios@7dc0f706]" name="addingToCart" class="testcases.Scenarios"/>
        <method signature="Scenarios.checkOut()[pri:4, instance:testcases.Scenarios@7dc0f706]" name="checkOut" class="testcases.Scenarios"/>
        <method signature="Scenarios.additional_Case()[pri:5, instance:testcases.Scenarios@7dc0f706]" name="additional_Case" class="testcases.Scenarios"/>
        <method signature="Scenarios.purposelyFailLoginFlow()[pri:6, instance:testcases.Scenarios@7dc0f706]" name="purposelyFailLoginFlow" class="testcases.Scenarios"/>
      </group> <!-- sanity -->
      <group name="positive">
        <method signature="Scenarios.loginFlow()[pri:0, instance:testcases.Scenarios@7dc0f706]" name="loginFlow" class="testcases.Scenarios"/>
        <method signature="Scenarios.productListingVerification()[pri:1, instance:testcases.Scenarios@7dc0f706]" name="productListingVerification" class="testcases.Scenarios"/>
        <method signature="Scenarios.purposelyFailLoginFlow()[pri:6, instance:testcases.Scenarios@7dc0f706]" name="purposelyFailLoginFlow" class="testcases.Scenarios"/>
      </group> <!-- positive -->
    </groups>
    <test started-at="2024-04-12T10:49:01 IST" name="Test" finished-at="2024-04-12T10:51:49 IST" duration-ms="168052">
      <class name="testcases.Scenarios">
        <test-method is-config="true" signature="initialization()[pri:0, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:49:01 IST" name="initialization" finished-at="2024-04-12T10:49:01 IST" duration-ms="167" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialization -->
        <test-method is-config="true" signature="loginToApplication()[pri:0, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:49:01 IST" name="loginToApplication" description="Logs into the application" finished-at="2024-04-12T10:49:18 IST" duration-ms="17322" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginToApplication -->
        <test-method signature="loginFlow()[pri:0, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:49:18 IST" name="loginFlow" description="Checks if logo is displayed after login" finished-at="2024-04-12T10:49:18 IST" duration-ms="114" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginFlow -->
        <test-method is-config="true" signature="cleanUp(org.testng.ITestResult)[pri:0, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:49:18 IST" name="cleanUp" description="Quits browser" finished-at="2024-04-12T10:49:21 IST" duration-ms="2957" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginFlow status=SUCCESS method=Scenarios.loginFlow()[pri:0, instance:testcases.Scenarios@7dc0f706] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="loginToApplication()[pri:0, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:49:21 IST" name="loginToApplication" description="Logs into the application" finished-at="2024-04-12T10:49:50 IST" duration-ms="29066" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginToApplication -->
        <test-method signature="productListingVerification()[pri:1, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:49:50 IST" name="productListingVerification" description="Checks if products are listed correctly" finished-at="2024-04-12T10:50:11 IST" depends-on-methods="testcases.Scenarios.loginFlow" duration-ms="20099" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- productListingVerification -->
        <test-method is-config="true" signature="cleanUp(org.testng.ITestResult)[pri:0, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:50:11 IST" name="cleanUp" description="Quits browser" finished-at="2024-04-12T10:50:12 IST" duration-ms="1032" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=productListingVerification status=SUCCESS method=Scenarios.productListingVerification()[pri:1, instance:testcases.Scenarios@7dc0f706] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="loginToApplication()[pri:0, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:50:12 IST" name="loginToApplication" description="Logs into the application" finished-at="2024-04-12T10:50:41 IST" duration-ms="29730" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginToApplication -->
        <test-method signature="sortingCheck()[pri:2, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:50:41 IST" name="sortingCheck" description="Checks if products are sorted correctly on different options of product and price" finished-at="2024-04-12T10:50:43 IST" depends-on-methods="testcases.Scenarios.loginFlow" duration-ms="1817" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sortingCheck -->
        <test-method is-config="true" signature="cleanUp(org.testng.ITestResult)[pri:0, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:50:43 IST" name="cleanUp" description="Quits browser" finished-at="2024-04-12T10:50:47 IST" duration-ms="3708" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sortingCheck status=SUCCESS method=Scenarios.sortingCheck()[pri:2, instance:testcases.Scenarios@7dc0f706] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="loginToApplication()[pri:0, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:50:47 IST" name="loginToApplication" description="Logs into the application" finished-at="2024-04-12T10:51:08 IST" duration-ms="21010" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginToApplication -->
        <test-method signature="addingToCart()[pri:3, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:51:08 IST" name="addingToCart" description="Checks if products are added to cart" finished-at="2024-04-12T10:51:08 IST" depends-on-methods="testcases.Scenarios.loginFlow" duration-ms="179" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addingToCart -->
        <test-method is-config="true" signature="cleanUp(org.testng.ITestResult)[pri:0, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:51:08 IST" name="cleanUp" description="Quits browser" finished-at="2024-04-12T10:51:11 IST" duration-ms="2707" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addingToCart status=SUCCESS method=Scenarios.addingToCart()[pri:3, instance:testcases.Scenarios@7dc0f706] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="loginToApplication()[pri:0, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:51:11 IST" name="loginToApplication" description="Logs into the application" finished-at="2024-04-12T10:51:20 IST" duration-ms="9343" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginToApplication -->
        <test-method signature="checkOut()[pri:4, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:51:20 IST" name="checkOut" description="Checks if user is able to checkout products" finished-at="2024-04-12T10:51:22 IST" depends-on-methods="testcases.Scenarios.loginFlow" duration-ms="1560" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkOut -->
        <test-method is-config="true" signature="cleanUp(org.testng.ITestResult)[pri:0, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:51:22 IST" name="cleanUp" description="Quits browser" finished-at="2024-04-12T10:51:22 IST" duration-ms="338" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=checkOut status=SUCCESS method=Scenarios.checkOut()[pri:4, instance:testcases.Scenarios@7dc0f706] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="loginToApplication()[pri:0, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:51:22 IST" name="loginToApplication" description="Logs into the application" finished-at="2024-04-12T10:51:33 IST" duration-ms="10692" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginToApplication -->
        <test-method signature="additional_Case()[pri:5, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:51:33 IST" name="additional_Case" description="Checks if user is able to checkout first 3 least priced products" finished-at="2024-04-12T10:51:34 IST" depends-on-methods="testcases.Scenarios.loginFlow" duration-ms="997" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- additional_Case -->
        <test-method is-config="true" signature="cleanUp(org.testng.ITestResult)[pri:0, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:51:34 IST" name="cleanUp" description="Quits browser" finished-at="2024-04-12T10:51:35 IST" duration-ms="1023" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=additional_Case status=SUCCESS method=Scenarios.additional_Case()[pri:5, instance:testcases.Scenarios@7dc0f706] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="loginToApplication()[pri:0, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:51:35 IST" name="loginToApplication" description="Logs into the application" finished-at="2024-04-12T10:51:48 IST" duration-ms="13082" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginToApplication -->
        <test-method signature="purposelyFailLoginFlow()[pri:6, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:51:48 IST" name="purposelyFailLoginFlow" description="Purposely fails login flow for demo" finished-at="2024-04-12T10:51:49 IST" duration-ms="987" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Swag Labs text is not matching expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Swag Labs text is not matching expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertTrue(Assert.java:57)
at testcases.Scenarios.purposelyFailLoginFlow(Scenarios.java:201)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:228)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:961)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:201)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:819)
at org.testng.TestRunner.run(TestRunner.java:619)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1228)
at org.testng.TestNG.runSuites(TestNG.java:1134)
at org.testng.TestNG.run(TestNG.java:1101)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- purposelyFailLoginFlow -->
        <test-method is-config="true" signature="cleanUp(org.testng.ITestResult)[pri:0, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:51:49 IST" name="cleanUp" description="Quits browser" finished-at="2024-04-12T10:51:49 IST" duration-ms="208" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=purposelyFailLoginFlow status=FAILURE method=Scenarios.purposelyFailLoginFlow()[pri:6, instance:testcases.Scenarios@7dc0f706] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:testcases.Scenarios@7dc0f706]" started-at="2024-04-12T10:51:49 IST" name="cleanUp" finished-at="2024-04-12T10:51:50 IST" duration-ms="685" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
      </class> <!-- testcases.Scenarios -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
